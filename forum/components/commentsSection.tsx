"use client";

import React, { useState, useEffect } from "react";
import CommentCard from "@/components/commentCard"; // Adjust import if necessary

type CommentsSectionProps = {
  threadId: number;
  initialComments: ThreadComment[];
  onAddComment: (content: string) => void;
  isLocked: boolean;
  onMarkAsAnswer: (commentId: number, markAsAnswer: boolean) => void;
  thread: Thread;
  currentUser: User | null;
};

const CommentsSection: React.FC<CommentsSectionProps> = ({
  threadId,
  initialComments,
  onAddComment,
  isLocked,
  onMarkAsAnswer,
  thread,
  currentUser,
}) => {
  const [comments, setComments] = useState<ThreadComment[]>(initialComments);
  const [newComment, setNewComment] = useState<string>("");

  useEffect(() => {
    setComments(initialComments);
  }, [initialComments]);

  const handleAddComment = () => {
    if (newComment.trim() !== "" && !isLocked && currentUser) {
      onAddComment(newComment.trim());
      setNewComment(""); // Clear the text area after submission
    }
  };

  const handleAddReply = (content: string, parentCommentId: number) => {
    const newReply: ThreadComment = {
      id: comments.length + 1, // This should be generated by your backend
      thread: threadId,
      content,
      creator: currentUser!,
      creationDate: new Date().toISOString(),
      parentCommentId, // Set the parent ID
      isAnswered: false, // Default for replies
    };
    setComments((prev) => [...prev, newReply]);
  };

  // Get top-level comments
  const topLevelComments = comments.filter((comment) => !comment.parentCommentId);

  return (
    <div>
      <h2 className="text-lg font-semibold mb-4">Comments</h2>
      {topLevelComments.map((comment) => (
        <div key={comment.id}>
          <CommentCard
            comment={comment}
            thread={thread}
            currentUser={currentUser}
            onMarkAsAnswer={onMarkAsAnswer}
            onAddReply={handleAddReply} // Pass the reply handler
            replies={[]}          />
          {/* Render replies */}
          <div className="ml-4">
            {comments
              .filter((reply) => reply.parentCommentId === comment.id)
              .map((reply) => (
                <CommentCard
                  key={reply.id}
                  comment={reply}
                  thread={thread}
                  currentUser={currentUser}
                  onMarkAsAnswer={onMarkAsAnswer}
                  onAddReply={handleAddReply} // Allow replies to replies
                  replies={[]}                />
              ))}
          </div>
        </div>
      ))}

      {/* Comment input area */}
      <div className="mt-4 text-black">
        {!currentUser ? (
          <div className="text-gray-500">
            Please log in to add a comment.
          </div>
        ) : (
          <>
            <textarea 
              value={newComment}
              onChange={(e) => setNewComment(e.target.value)}
              placeholder="Add a comment..."
              disabled={isLocked}
              className="border p-2 w-full rounded"
            />
            <button
              onClick={handleAddComment}
              disabled={isLocked}
              className="mt-2 px-3 py-1 rounded-full text-sm border border-gray-500 bg-gray-800 text-white dark:bg-white dark:text-black hover:bg-gray-700 hover:dark:bg-gray-300 transition duration-300"
            >
              Add Comment
            </button>
          </>
        )}
      </div>
    </div>
  );
};

export default CommentsSection;
